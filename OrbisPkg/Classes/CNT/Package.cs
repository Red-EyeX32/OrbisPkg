using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

using OrbisPkg.Security;
using OrbisPkg.Classes;

namespace OrbisPkg.CNT
{
    /// <summary>
    /// A package file (PKG) is a file that contains the content that the user will download or install.
    /// </summary>
    public sealed class Package
    {
        #region Variables

        private EndianIO IO;
        private string _Passcode;

        public PackageFile Pkg = new PackageFile();

        private const uint PKG_FLAG_FINALIZED = (1u << 31);

        private const uint PKG_FLAGS_VER_1     = 0x01000000;
        private const uint PKG_FLAGS_VER_2     = 0x02000000;
        private const uint PKG_FLAGS_INTERNAL  = 0x40000000;
        private const uint PKG_FLAGS_FINALIZED = 0x80000000;

        private const uint PKG_CONTENT_ID_SIZE       = 0x24;
        private const uint PKG_CONTENT_ID_BLOCK_SIZE = 0x30;
        private const uint PKG_HASH_SIZE             = 0x20;
        private const uint PKG_PASSCODE_SIZE         = 0x20;
        private const uint PKG_KEYSTONE_BLOCK_SIZE   = 0x20;

        private const uint PKG_CONTENT_FLAGS_FIRST_PATCH      = 0x00100000;
        private const uint PKG_CONTENT_FLAGS_PATCHGO          = 0x00200000;
        private const uint PKG_CONTENT_FLAGS_REMASTER         = 0x00400000;
        private const uint PKG_CONTENT_FLAGS_PS_CLOUD         = 0x00800000;
        private const uint PKG_CONTENT_FLAGS_GD_AC            = 0x02000000;
        private const uint PKG_CONTENT_FLAGS_NON_GAME         = 0x04000000;
        private const uint PKG_CONTENT_FLAGS_0x8000000        = 0x08000000; // has data?
        private const uint PKG_CONTENT_FLAGS_SUBSEQUENT_PATCH = 0x40000000;
        private const uint PKG_CONTENT_FLAGS_DELTA_PATCH      = 0x41000000;
        private const uint PKG_CONTENT_FLAGS_CUMULATIVE_PATCH = 0x60000000;

        private const ulong PKG_PFS_FLAG_NESTED_IMAGE = 0x8000000000000000;

        private const uint PKG_MAX_ENTRY_KEYS        = 0x07;
        private const uint PKG_ENTRY_KEYSET_SIZE     = 0x20;
        private const uint PKG_ENTRY_KEYSET_ENC_SIZE = 0x100;

        private enum AppType
        {
            APP_TYPE_PAID_STANDALONE_FULL = 1,
            APP_TYPE_UPGRADABLE = 2,
            APP_TYPE_DEMO = 3,
            APP_TYPE_FREEMIUM = 4,
        }

        public enum DrmType
        {
            DRM_TYPE_NONE = 0x0,
            DRM_TYPE_PS4 = 0xF,
        }

        public enum ContentType
        {
            CONTENT_TYPE_GD = 0x1A, /* pkg_ps4_app, pkg_ps4_patch, pkg_ps4_remaster */
            CONTENT_TYPE_AC = 0x1B, /* pkg_ps4_ac_data, pkg_ps4_sf_theme, pkg_ps4_theme */
            CONTENT_TYPE_AL = 0x1C, /* pkg_ps4_ac_nodata */
            CONTENT_TYPE_DP = 0x1E, /* pkg_ps4_delta_patch */
        }

        public enum IroTag
        {
            IRO_TAG_SF_THEME = 0x1, /* SHAREfactory theme */
            IRO_TAG_SS_THEME = 0x2, /* System Software theme */
        }

        #region Entry Ids

        public enum EntryId
        {
            PKG_ENTRY_ID__DIGESTS = 0x00000001,
            PKG_ENTRY_ID__ENTRY_KEYS = 0x00000010,
            PKG_ENTRY_ID__IMAGE_KEY = 0x00000020,
            PKG_ENTRY_ID__GENERAL_DIGESTS = 0x00000080,
            PKG_ENTRY_ID__METAS = 0x00000100,
            PKG_ENTRY_ID__ENTRY_NAMES = 0x00000200,

            PKG_ENTRY_ID__LICENSE_DAT = 0x00000400,
            PKG_ENTRY_ID__LICENSE_INFO = 0x00000401,
            PKG_ENTRY_ID__NPTITLE_DAT = 0x00000402,
            PKG_ENTRY_ID__NPBIND_DAT = 0x00000403,
            PKG_ENTRY_ID__SELFINFO_DAT = 0x00000404,
            PKG_ENTRY_ID__IMAGEINFO_DAT = 0x00000406,
            PKG_ENTRY_ID__TARGET_DELTAINFO_DAT = 0x00000407,
            PKG_ENTRY_ID__ORIGIN_DELTAINFO_DAT = 0x00000408,
            PKG_ENTRY_ID__PSRESERVED_DAT = 0x00000409,
            PKG_ENTRY_ID__PARAM_SFO = 0x00001000,
            PKG_ENTRY_ID__PLAYGO_CHUNK_DAT = 0x00001001,
            PKG_ENTRY_ID__PLAYGO_CHUNK_SHA = 0x00001002,
            PKG_ENTRY_ID__PLAYGO_MANIFEST_XML = 0x00001003,
            PKG_ENTRY_ID__PRONUNCIATION_XML = 0x00001004,
            PKG_ENTRY_ID__PRONUNCIATION_SIG = 0x00001005,
            PKG_ENTRY_ID__PIC1_PNG = 0x00001006,
            PKG_ENTRY_ID__PUBTOOLINFO_DAT = 0x00001007,
            PKG_ENTRY_ID__APP__PLAYGO_CHUNK_DAT = 0x00001008,
            PKG_ENTRY_ID__APP__PLAYGO_CHUNK_SHA = 0x00001009,
            PKG_ENTRY_ID__APP__PLAYGO_MANIFEST_XML = 0x0000100A,
            PKG_ENTRY_ID__SHAREPARAM_JSON = 0x0000100B,
            PKG_ENTRY_ID__SHAREOVERLAYIMAGE_PNG = 0x0000100C,
            PKG_ENTRY_ID__SAVE_DATA_PNG = 0x0000100D,
            PKG_ENTRY_ID__SHAREPRIVACYGUARDIMAGE_PNG = 0x0000100E,
            PKG_ENTRY_ID__ICON0_PNG = 0x00001200,
            PKG_ENTRY_ID__ICON0_00_PNG = 0x00001201,
            PKG_ENTRY_ID__ICON0_01_PNG = 0x00001202,
            PKG_ENTRY_ID__ICON0_02_PNG = 0x00001203,
            PKG_ENTRY_ID__ICON0_03_PNG = 0x00001204,
            PKG_ENTRY_ID__ICON0_04_PNG = 0x00001205,
            PKG_ENTRY_ID__ICON0_05_PNG = 0x00001206,
            PKG_ENTRY_ID__ICON0_06_PNG = 0x00001207,
            PKG_ENTRY_ID__ICON0_07_PNG = 0x00001208,
            PKG_ENTRY_ID__ICON0_08_PNG = 0x00001209,
            PKG_ENTRY_ID__ICON0_09_PNG = 0x0000120A,
            PKG_ENTRY_ID__ICON0_10_PNG = 0x0000120B,
            PKG_ENTRY_ID__ICON0_11_PNG = 0x0000120C,
            PKG_ENTRY_ID__ICON0_12_PNG = 0x0000120D,
            PKG_ENTRY_ID__ICON0_13_PNG = 0x0000120E,
            PKG_ENTRY_ID__ICON0_14_PNG = 0x0000120F,
            PKG_ENTRY_ID__ICON0_15_PNG = 0x00001210,
            PKG_ENTRY_ID__ICON0_16_PNG = 0x00001211,
            PKG_ENTRY_ID__ICON0_17_PNG = 0x00001212,
            PKG_ENTRY_ID__ICON0_18_PNG = 0x00001213,
            PKG_ENTRY_ID__ICON0_19_PNG = 0x00001214,
            PKG_ENTRY_ID__ICON0_20_PNG = 0x00001215,
            PKG_ENTRY_ID__ICON0_21_PNG = 0x00001216,
            PKG_ENTRY_ID__ICON0_22_PNG = 0x00001217,
            PKG_ENTRY_ID__ICON0_23_PNG = 0x00001218,
            PKG_ENTRY_ID__ICON0_24_PNG = 0x00001219,
            PKG_ENTRY_ID__ICON0_25_PNG = 0x0000121A,
            PKG_ENTRY_ID__ICON0_26_PNG = 0x0000121B,
            PKG_ENTRY_ID__ICON0_27_PNG = 0x0000121C,
            PKG_ENTRY_ID__ICON0_28_PNG = 0x0000121D,
            PKG_ENTRY_ID__ICON0_29_PNG = 0x0000121E,
            PKG_ENTRY_ID__ICON0_30_PNG = 0x0000121F,
            PKG_ENTRY_ID__PIC0_PNG = 0x00001220,
            PKG_ENTRY_ID__SND0_AT9 = 0x00001240,
            PKG_ENTRY_ID__PIC1_00_PNG = 0x00001241,
            PKG_ENTRY_ID__PIC1_01_PNG = 0x00001242,
            PKG_ENTRY_ID__PIC1_02_PNG = 0x00001243,
            PKG_ENTRY_ID__PIC1_03_PNG = 0x00001244,
            PKG_ENTRY_ID__PIC1_04_PNG = 0x00001245,
            PKG_ENTRY_ID__PIC1_05_PNG = 0x00001246,
            PKG_ENTRY_ID__PIC1_06_PNG = 0x00001247,
            PKG_ENTRY_ID__PIC1_07_PNG = 0x00001248,
            PKG_ENTRY_ID__PIC1_08_PNG = 0x00001249,
            PKG_ENTRY_ID__PIC1_09_PNG = 0x0000124A,
            PKG_ENTRY_ID__PIC1_10_PNG = 0x0000124B,
            PKG_ENTRY_ID__PIC1_11_PNG = 0x0000124C,
            PKG_ENTRY_ID__PIC1_12_PNG = 0x0000124D,
            PKG_ENTRY_ID__PIC1_13_PNG = 0x0000124E,
            PKG_ENTRY_ID__PIC1_14_PNG = 0x0000124F,
            PKG_ENTRY_ID__PIC1_15_PNG = 0x00001250,
            PKG_ENTRY_ID__PIC1_16_PNG = 0x00001251,
            PKG_ENTRY_ID__PIC1_17_PNG = 0x00001252,
            PKG_ENTRY_ID__PIC1_18_PNG = 0x00001253,
            PKG_ENTRY_ID__PIC1_19_PNG = 0x00001254,
            PKG_ENTRY_ID__PIC1_20_PNG = 0x00001255,
            PKG_ENTRY_ID__PIC1_21_PNG = 0x00001256,
            PKG_ENTRY_ID__PIC1_22_PNG = 0x00001257,
            PKG_ENTRY_ID__PIC1_23_PNG = 0x00001258,
            PKG_ENTRY_ID__PIC1_24_PNG = 0x00001259,
            PKG_ENTRY_ID__PIC1_25_PNG = 0x0000125A,
            PKG_ENTRY_ID__PIC1_26_PNG = 0x0000125B,
            PKG_ENTRY_ID__PIC1_27_PNG = 0x0000125C,
            PKG_ENTRY_ID__PIC1_28_PNG = 0x0000125D,
            PKG_ENTRY_ID__PIC1_29_PNG = 0x0000125E,
            PKG_ENTRY_ID__PIC1_30_PNG = 0x0000125F,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_XML = 0x00001260,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_00_XML = 0x00001261,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_01_XML = 0x00001262,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_02_XML = 0x00001263,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_03_XML = 0x00001264,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_04_XML = 0x00001265,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_05_XML = 0x00001266,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_06_XML = 0x00001267,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_07_XML = 0x00001268,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_08_XML = 0x00001269,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_09_XML = 0x0000126A,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_10_XML = 0x0000126B,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_11_XML = 0x0000126C,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_12_XML = 0x0000126D,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_13_XML = 0x0000126E,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_14_XML = 0x0000126F,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_15_XML = 0x00001270,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_16_XML = 0x00001271,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_17_XML = 0x00001272,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_18_XML = 0x00001273,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_19_XML = 0x00001274,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_20_XML = 0x00001275,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_21_XML = 0x00001276,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_22_XML = 0x00001277,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_23_XML = 0x00001278,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_24_XML = 0x00001279,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_25_XML = 0x0000127A,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_26_XML = 0x0000127B,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_27_XML = 0x0000127C,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_28_XML = 0x0000127D,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_29_XML = 0x0000127E,
            PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_30_XML = 0x0000127F,
            PKG_ENTRY_ID__ICON0_DDS = 0x00001280,
            PKG_ENTRY_ID__ICON0_00_DDS = 0x00001281,
            PKG_ENTRY_ID__ICON0_01_DDS = 0x00001282,
            PKG_ENTRY_ID__ICON0_02_DDS = 0x00001283,
            PKG_ENTRY_ID__ICON0_03_DDS = 0x00001284,
            PKG_ENTRY_ID__ICON0_04_DDS = 0x00001285,
            PKG_ENTRY_ID__ICON0_05_DDS = 0x00001286,
            PKG_ENTRY_ID__ICON0_06_DDS = 0x00001287,
            PKG_ENTRY_ID__ICON0_07_DDS = 0x00001288,
            PKG_ENTRY_ID__ICON0_08_DDS = 0x00001289,
            PKG_ENTRY_ID__ICON0_09_DDS = 0x0000128A,
            PKG_ENTRY_ID__ICON0_10_DDS = 0x0000128B,
            PKG_ENTRY_ID__ICON0_11_DDS = 0x0000128C,
            PKG_ENTRY_ID__ICON0_12_DDS = 0x0000128D,
            PKG_ENTRY_ID__ICON0_13_DDS = 0x0000128E,
            PKG_ENTRY_ID__ICON0_14_DDS = 0x0000128F,
            PKG_ENTRY_ID__ICON0_15_DDS = 0x00001290,
            PKG_ENTRY_ID__ICON0_16_DDS = 0x00001291,
            PKG_ENTRY_ID__ICON0_17_DDS = 0x00001292,
            PKG_ENTRY_ID__ICON0_18_DDS = 0x00001293,
            PKG_ENTRY_ID__ICON0_19_DDS = 0x00001294,
            PKG_ENTRY_ID__ICON0_20_DDS = 0x00001295,
            PKG_ENTRY_ID__ICON0_21_DDS = 0x00001296,
            PKG_ENTRY_ID__ICON0_22_DDS = 0x00001297,
            PKG_ENTRY_ID__ICON0_23_DDS = 0x00001298,
            PKG_ENTRY_ID__ICON0_24_DDS = 0x00001299,
            PKG_ENTRY_ID__ICON0_25_DDS = 0x0000129A,
            PKG_ENTRY_ID__ICON0_26_DDS = 0x0000129B,
            PKG_ENTRY_ID__ICON0_27_DDS = 0x0000129C,
            PKG_ENTRY_ID__ICON0_28_DDS = 0x0000129D,
            PKG_ENTRY_ID__ICON0_29_DDS = 0x0000129E,
            PKG_ENTRY_ID__ICON0_30_DDS = 0x0000129F,
            PKG_ENTRY_ID__PIC0_DDS = 0x000012A0,
            PKG_ENTRY_ID__PIC1_DDS = 0x000012C0,
            PKG_ENTRY_ID__PIC1_00_DDS = 0x000012C1,
            PKG_ENTRY_ID__PIC1_01_DDS = 0x000012C2,
            PKG_ENTRY_ID__PIC1_02_DDS = 0x000012C3,
            PKG_ENTRY_ID__PIC1_03_DDS = 0x000012C4,
            PKG_ENTRY_ID__PIC1_04_DDS = 0x000012C5,
            PKG_ENTRY_ID__PIC1_05_DDS = 0x000012C6,
            PKG_ENTRY_ID__PIC1_06_DDS = 0x000012C7,
            PKG_ENTRY_ID__PIC1_07_DDS = 0x000012C8,
            PKG_ENTRY_ID__PIC1_08_DDS = 0x000012C9,
            PKG_ENTRY_ID__PIC1_09_DDS = 0x000012CA,
            PKG_ENTRY_ID__PIC1_10_DDS = 0x000012CB,
            PKG_ENTRY_ID__PIC1_11_DDS = 0x000012CC,
            PKG_ENTRY_ID__PIC1_12_DDS = 0x000012CD,
            PKG_ENTRY_ID__PIC1_13_DDS = 0x000012CE,
            PKG_ENTRY_ID__PIC1_14_DDS = 0x000012CF,
            PKG_ENTRY_ID__PIC1_15_DDS = 0x000012D0,
            PKG_ENTRY_ID__PIC1_16_DDS = 0x000012D1,
            PKG_ENTRY_ID__PIC1_17_DDS = 0x000012D2,
            PKG_ENTRY_ID__PIC1_18_DDS = 0x000012D3,
            PKG_ENTRY_ID__PIC1_19_DDS = 0x000012D4,
            PKG_ENTRY_ID__PIC1_20_DDS = 0x000012D5,
            PKG_ENTRY_ID__PIC1_21_DDS = 0x000012D6,
            PKG_ENTRY_ID__PIC1_22_DDS = 0x000012D7,
            PKG_ENTRY_ID__PIC1_23_DDS = 0x000012D8,
            PKG_ENTRY_ID__PIC1_24_DDS = 0x000012D9,
            PKG_ENTRY_ID__PIC1_25_DDS = 0x000012DA,
            PKG_ENTRY_ID__PIC1_26_DDS = 0x000012DB,
            PKG_ENTRY_ID__PIC1_27_DDS = 0x000012DC,
            PKG_ENTRY_ID__PIC1_28_DDS = 0x000012DD,
            PKG_ENTRY_ID__PIC1_29_DDS = 0x000012DE,
            PKG_ENTRY_ID__PIC1_30_DDS = 0x000012DF,
            PKG_ENTRY_ID__TROPHY__TROPHY00_TRP = 0x00001400,
            PKG_ENTRY_ID__TROPHY__TROPHY01_TRP = 0x00001401,
            PKG_ENTRY_ID__TROPHY__TROPHY02_TRP = 0x00001402,
            PKG_ENTRY_ID__TROPHY__TROPHY03_TRP = 0x00001403,
            PKG_ENTRY_ID__TROPHY__TROPHY04_TRP = 0x00001404,
            PKG_ENTRY_ID__TROPHY__TROPHY05_TRP = 0x00001405,
            PKG_ENTRY_ID__TROPHY__TROPHY06_TRP = 0x00001406,
            PKG_ENTRY_ID__TROPHY__TROPHY07_TRP = 0x00001407,
            PKG_ENTRY_ID__TROPHY__TROPHY08_TRP = 0x00001408,
            PKG_ENTRY_ID__TROPHY__TROPHY09_TRP = 0x00001409,
            PKG_ENTRY_ID__TROPHY__TROPHY10_TRP = 0x0000140A,
            PKG_ENTRY_ID__TROPHY__TROPHY11_TRP = 0x0000140B,
            PKG_ENTRY_ID__TROPHY__TROPHY12_TRP = 0x0000140C,
            PKG_ENTRY_ID__TROPHY__TROPHY13_TRP = 0x0000140D,
            PKG_ENTRY_ID__TROPHY__TROPHY14_TRP = 0x0000140E,
            PKG_ENTRY_ID__TROPHY__TROPHY15_TRP = 0x0000140F,
            PKG_ENTRY_ID__TROPHY__TROPHY16_TRP = 0x00001410,
            PKG_ENTRY_ID__TROPHY__TROPHY17_TRP = 0x00001411,
            PKG_ENTRY_ID__TROPHY__TROPHY18_TRP = 0x00001412,
            PKG_ENTRY_ID__TROPHY__TROPHY19_TRP = 0x00001413,
            PKG_ENTRY_ID__TROPHY__TROPHY20_TRP = 0x00001414,
            PKG_ENTRY_ID__TROPHY__TROPHY21_TRP = 0x00001415,
            PKG_ENTRY_ID__TROPHY__TROPHY22_TRP = 0x00001416,
            PKG_ENTRY_ID__TROPHY__TROPHY23_TRP = 0x00001417,
            PKG_ENTRY_ID__TROPHY__TROPHY24_TRP = 0x00001418,
            PKG_ENTRY_ID__TROPHY__TROPHY25_TRP = 0x00001419,
            PKG_ENTRY_ID__TROPHY__TROPHY26_TRP = 0x0000141A,
            PKG_ENTRY_ID__TROPHY__TROPHY27_TRP = 0x0000141B,
            PKG_ENTRY_ID__TROPHY__TROPHY28_TRP = 0x0000141C,
            PKG_ENTRY_ID__TROPHY__TROPHY29_TRP = 0x0000141D,
            PKG_ENTRY_ID__TROPHY__TROPHY30_TRP = 0x0000141E,
            PKG_ENTRY_ID__TROPHY__TROPHY31_TRP = 0x0000141F,
            PKG_ENTRY_ID__TROPHY__TROPHY32_TRP = 0x00001420,
            PKG_ENTRY_ID__TROPHY__TROPHY33_TRP = 0x00001421,
            PKG_ENTRY_ID__TROPHY__TROPHY34_TRP = 0x00001422,
            PKG_ENTRY_ID__TROPHY__TROPHY35_TRP = 0x00001423,
            PKG_ENTRY_ID__TROPHY__TROPHY36_TRP = 0x00001424,
            PKG_ENTRY_ID__TROPHY__TROPHY37_TRP = 0x00001425,
            PKG_ENTRY_ID__TROPHY__TROPHY38_TRP = 0x00001426,
            PKG_ENTRY_ID__TROPHY__TROPHY39_TRP = 0x00001427,
            PKG_ENTRY_ID__TROPHY__TROPHY40_TRP = 0x00001428,
            PKG_ENTRY_ID__TROPHY__TROPHY41_TRP = 0x00001429,
            PKG_ENTRY_ID__TROPHY__TROPHY42_TRP = 0x0000142A,
            PKG_ENTRY_ID__TROPHY__TROPHY43_TRP = 0x0000142B,
            PKG_ENTRY_ID__TROPHY__TROPHY44_TRP = 0x0000142C,
            PKG_ENTRY_ID__TROPHY__TROPHY45_TRP = 0x0000142D,
            PKG_ENTRY_ID__TROPHY__TROPHY46_TRP = 0x0000142E,
            PKG_ENTRY_ID__TROPHY__TROPHY47_TRP = 0x0000142F,
            PKG_ENTRY_ID__TROPHY__TROPHY48_TRP = 0x00001430,
            PKG_ENTRY_ID__TROPHY__TROPHY49_TRP = 0x00001431,
            PKG_ENTRY_ID__TROPHY__TROPHY50_TRP = 0x00001432,
            PKG_ENTRY_ID__TROPHY__TROPHY51_TRP = 0x00001433,
            PKG_ENTRY_ID__TROPHY__TROPHY52_TRP = 0x00001434,
            PKG_ENTRY_ID__TROPHY__TROPHY53_TRP = 0x00001435,
            PKG_ENTRY_ID__TROPHY__TROPHY54_TRP = 0x00001436,
            PKG_ENTRY_ID__TROPHY__TROPHY55_TRP = 0x00001437,
            PKG_ENTRY_ID__TROPHY__TROPHY56_TRP = 0x00001438,
            PKG_ENTRY_ID__TROPHY__TROPHY57_TRP = 0x00001439,
            PKG_ENTRY_ID__TROPHY__TROPHY58_TRP = 0x0000143A,
            PKG_ENTRY_ID__TROPHY__TROPHY59_TRP = 0x0000143B,
            PKG_ENTRY_ID__TROPHY__TROPHY60_TRP = 0x0000143C,
            PKG_ENTRY_ID__TROPHY__TROPHY61_TRP = 0x0000143D,
            PKG_ENTRY_ID__TROPHY__TROPHY62_TRP = 0x0000143E,
            PKG_ENTRY_ID__TROPHY__TROPHY63_TRP = 0x0000143F,
            PKG_ENTRY_ID__TROPHY__TROPHY64_TRP = 0x00001440,
            PKG_ENTRY_ID__TROPHY__TROPHY65_TRP = 0x00001441,
            PKG_ENTRY_ID__TROPHY__TROPHY66_TRP = 0x00001442,
            PKG_ENTRY_ID__TROPHY__TROPHY67_TRP = 0x00001443,
            PKG_ENTRY_ID__TROPHY__TROPHY68_TRP = 0x00001444,
            PKG_ENTRY_ID__TROPHY__TROPHY69_TRP = 0x00001445,
            PKG_ENTRY_ID__TROPHY__TROPHY70_TRP = 0x00001446,
            PKG_ENTRY_ID__TROPHY__TROPHY71_TRP = 0x00001447,
            PKG_ENTRY_ID__TROPHY__TROPHY72_TRP = 0x00001448,
            PKG_ENTRY_ID__TROPHY__TROPHY73_TRP = 0x00001449,
            PKG_ENTRY_ID__TROPHY__TROPHY74_TRP = 0x0000144A,
            PKG_ENTRY_ID__TROPHY__TROPHY75_TRP = 0x0000144B,
            PKG_ENTRY_ID__TROPHY__TROPHY76_TRP = 0x0000144C,
            PKG_ENTRY_ID__TROPHY__TROPHY77_TRP = 0x0000144D,
            PKG_ENTRY_ID__TROPHY__TROPHY78_TRP = 0x0000144E,
            PKG_ENTRY_ID__TROPHY__TROPHY79_TRP = 0x0000144F,
            PKG_ENTRY_ID__TROPHY__TROPHY80_TRP = 0x00001450,
            PKG_ENTRY_ID__TROPHY__TROPHY81_TRP = 0x00001451,
            PKG_ENTRY_ID__TROPHY__TROPHY82_TRP = 0x00001452,
            PKG_ENTRY_ID__TROPHY__TROPHY83_TRP = 0x00001453,
            PKG_ENTRY_ID__TROPHY__TROPHY84_TRP = 0x00001454,
            PKG_ENTRY_ID__TROPHY__TROPHY85_TRP = 0x00001455,
            PKG_ENTRY_ID__TROPHY__TROPHY86_TRP = 0x00001456,
            PKG_ENTRY_ID__TROPHY__TROPHY87_TRP = 0x00001457,
            PKG_ENTRY_ID__TROPHY__TROPHY88_TRP = 0x00001458,
            PKG_ENTRY_ID__TROPHY__TROPHY89_TRP = 0x00001459,
            PKG_ENTRY_ID__TROPHY__TROPHY90_TRP = 0x0000145A,
            PKG_ENTRY_ID__TROPHY__TROPHY91_TRP = 0x0000145B,
            PKG_ENTRY_ID__TROPHY__TROPHY92_TRP = 0x0000145C,
            PKG_ENTRY_ID__TROPHY__TROPHY93_TRP = 0x0000145D,
            PKG_ENTRY_ID__TROPHY__TROPHY94_TRP = 0x0000145E,
            PKG_ENTRY_ID__TROPHY__TROPHY95_TRP = 0x0000145F,
            PKG_ENTRY_ID__TROPHY__TROPHY96_TRP = 0x00001460,
            PKG_ENTRY_ID__TROPHY__TROPHY97_TRP = 0x00001461,
            PKG_ENTRY_ID__TROPHY__TROPHY98_TRP = 0x00001462,
            PKG_ENTRY_ID__TROPHY__TROPHY99_TRP = 0x00001463,
            PKG_ENTRY_ID__KEYMAP_RP__001_PNG = 0x00001600,
            PKG_ENTRY_ID__KEYMAP_RP__002_PNG = 0x00001601,
            PKG_ENTRY_ID__KEYMAP_RP__003_PNG = 0x00001602,
            PKG_ENTRY_ID__KEYMAP_RP__004_PNG = 0x00001603,
            PKG_ENTRY_ID__KEYMAP_RP__005_PNG = 0x00001604,
            PKG_ENTRY_ID__KEYMAP_RP__006_PNG = 0x00001605,
            PKG_ENTRY_ID__KEYMAP_RP__007_PNG = 0x00001606,
            PKG_ENTRY_ID__KEYMAP_RP__008_PNG = 0x00001607,
            PKG_ENTRY_ID__KEYMAP_RP__009_PNG = 0x00001608,
            PKG_ENTRY_ID__KEYMAP_RP__010_PNG = 0x00001609,
            PKG_ENTRY_ID__KEYMAP_RP__00__001_PNG = 0x00001610,
            PKG_ENTRY_ID__KEYMAP_RP__00__002_PNG = 0x00001611,
            PKG_ENTRY_ID__KEYMAP_RP__00__003_PNG = 0x00001612,
            PKG_ENTRY_ID__KEYMAP_RP__00__004_PNG = 0x00001613,
            PKG_ENTRY_ID__KEYMAP_RP__00__005_PNG = 0x00001614,
            PKG_ENTRY_ID__KEYMAP_RP__00__006_PNG = 0x00001615,
            PKG_ENTRY_ID__KEYMAP_RP__00__007_PNG = 0x00001616,
            PKG_ENTRY_ID__KEYMAP_RP__00__008_PNG = 0x00001617,
            PKG_ENTRY_ID__KEYMAP_RP__00__009_PNG = 0x00001618,
            PKG_ENTRY_ID__KEYMAP_RP__00__010_PNG = 0x00001619,
            PKG_ENTRY_ID__KEYMAP_RP__01__001_PNG = 0x00001620,
            PKG_ENTRY_ID__KEYMAP_RP__01__002_PNG = 0x00001621,
            PKG_ENTRY_ID__KEYMAP_RP__01__003_PNG = 0x00001622,
            PKG_ENTRY_ID__KEYMAP_RP__01__004_PNG = 0x00001623,
            PKG_ENTRY_ID__KEYMAP_RP__01__005_PNG = 0x00001624,
            PKG_ENTRY_ID__KEYMAP_RP__01__006_PNG = 0x00001625,
            PKG_ENTRY_ID__KEYMAP_RP__01__007_PNG = 0x00001626,
            PKG_ENTRY_ID__KEYMAP_RP__01__008_PNG = 0x00001627,
            PKG_ENTRY_ID__KEYMAP_RP__01__009_PNG = 0x00001628,
            PKG_ENTRY_ID__KEYMAP_RP__01__010_PNG = 0x00001629,
            PKG_ENTRY_ID__KEYMAP_RP__02__001_PNG = 0x00001630,
            PKG_ENTRY_ID__KEYMAP_RP__02__002_PNG = 0x00001631,
            PKG_ENTRY_ID__KEYMAP_RP__02__003_PNG = 0x00001632,
            PKG_ENTRY_ID__KEYMAP_RP__02__004_PNG = 0x00001633,
            PKG_ENTRY_ID__KEYMAP_RP__02__005_PNG = 0x00001634,
            PKG_ENTRY_ID__KEYMAP_RP__02__006_PNG = 0x00001635,
            PKG_ENTRY_ID__KEYMAP_RP__02__007_PNG = 0x00001636,
            PKG_ENTRY_ID__KEYMAP_RP__02__008_PNG = 0x00001637,
            PKG_ENTRY_ID__KEYMAP_RP__02__009_PNG = 0x00001638,
            PKG_ENTRY_ID__KEYMAP_RP__02__010_PNG = 0x00001639,
            PKG_ENTRY_ID__KEYMAP_RP__03__001_PNG = 0x00001640,
            PKG_ENTRY_ID__KEYMAP_RP__03__002_PNG = 0x00001641,
            PKG_ENTRY_ID__KEYMAP_RP__03__003_PNG = 0x00001642,
            PKG_ENTRY_ID__KEYMAP_RP__03__004_PNG = 0x00001643,
            PKG_ENTRY_ID__KEYMAP_RP__03__005_PNG = 0x00001644,
            PKG_ENTRY_ID__KEYMAP_RP__03__006_PNG = 0x00001645,
            PKG_ENTRY_ID__KEYMAP_RP__03__007_PNG = 0x00001646,
            PKG_ENTRY_ID__KEYMAP_RP__03__008_PNG = 0x00001647,
            PKG_ENTRY_ID__KEYMAP_RP__03__009_PNG = 0x00001648,
            PKG_ENTRY_ID__KEYMAP_RP__03__010_PNG = 0x00001649,
            PKG_ENTRY_ID__KEYMAP_RP__04__001_PNG = 0x00001650,
            PKG_ENTRY_ID__KEYMAP_RP__04__002_PNG = 0x00001651,
            PKG_ENTRY_ID__KEYMAP_RP__04__003_PNG = 0x00001652,
            PKG_ENTRY_ID__KEYMAP_RP__04__004_PNG = 0x00001653,
            PKG_ENTRY_ID__KEYMAP_RP__04__005_PNG = 0x00001654,
            PKG_ENTRY_ID__KEYMAP_RP__04__006_PNG = 0x00001655,
            PKG_ENTRY_ID__KEYMAP_RP__04__007_PNG = 0x00001656,
            PKG_ENTRY_ID__KEYMAP_RP__04__008_PNG = 0x00001657,
            PKG_ENTRY_ID__KEYMAP_RP__04__009_PNG = 0x00001658,
            PKG_ENTRY_ID__KEYMAP_RP__04__010_PNG = 0x00001659,
            PKG_ENTRY_ID__KEYMAP_RP__05__001_PNG = 0x00001660,
            PKG_ENTRY_ID__KEYMAP_RP__05__002_PNG = 0x00001661,
            PKG_ENTRY_ID__KEYMAP_RP__05__003_PNG = 0x00001662,
            PKG_ENTRY_ID__KEYMAP_RP__05__004_PNG = 0x00001663,
            PKG_ENTRY_ID__KEYMAP_RP__05__005_PNG = 0x00001664,
            PKG_ENTRY_ID__KEYMAP_RP__05__006_PNG = 0x00001665,
            PKG_ENTRY_ID__KEYMAP_RP__05__007_PNG = 0x00001666,
            PKG_ENTRY_ID__KEYMAP_RP__05__008_PNG = 0x00001667,
            PKG_ENTRY_ID__KEYMAP_RP__05__009_PNG = 0x00001668,
            PKG_ENTRY_ID__KEYMAP_RP__05__010_PNG = 0x00001669,
            PKG_ENTRY_ID__KEYMAP_RP__06__001_PNG = 0x00001670,
            PKG_ENTRY_ID__KEYMAP_RP__06__002_PNG = 0x00001671,
            PKG_ENTRY_ID__KEYMAP_RP__06__003_PNG = 0x00001672,
            PKG_ENTRY_ID__KEYMAP_RP__06__004_PNG = 0x00001673,
            PKG_ENTRY_ID__KEYMAP_RP__06__005_PNG = 0x00001674,
            PKG_ENTRY_ID__KEYMAP_RP__06__006_PNG = 0x00001675,
            PKG_ENTRY_ID__KEYMAP_RP__06__007_PNG = 0x00001676,
            PKG_ENTRY_ID__KEYMAP_RP__06__008_PNG = 0x00001677,
            PKG_ENTRY_ID__KEYMAP_RP__06__009_PNG = 0x00001678,
            PKG_ENTRY_ID__KEYMAP_RP__06__010_PNG = 0x00001679,
            PKG_ENTRY_ID__KEYMAP_RP__07__001_PNG = 0x00001680,
            PKG_ENTRY_ID__KEYMAP_RP__07__002_PNG = 0x00001681,
            PKG_ENTRY_ID__KEYMAP_RP__07__003_PNG = 0x00001682,
            PKG_ENTRY_ID__KEYMAP_RP__07__004_PNG = 0x00001683,
            PKG_ENTRY_ID__KEYMAP_RP__07__005_PNG = 0x00001684,
            PKG_ENTRY_ID__KEYMAP_RP__07__006_PNG = 0x00001685,
            PKG_ENTRY_ID__KEYMAP_RP__07__007_PNG = 0x00001686,
            PKG_ENTRY_ID__KEYMAP_RP__07__008_PNG = 0x00001687,
            PKG_ENTRY_ID__KEYMAP_RP__07__009_PNG = 0x00001688,
            PKG_ENTRY_ID__KEYMAP_RP__07__010_PNG = 0x00001689,
            PKG_ENTRY_ID__KEYMAP_RP__08__001_PNG = 0x00001690,
            PKG_ENTRY_ID__KEYMAP_RP__08__002_PNG = 0x00001691,
            PKG_ENTRY_ID__KEYMAP_RP__08__003_PNG = 0x00001692,
            PKG_ENTRY_ID__KEYMAP_RP__08__004_PNG = 0x00001693,
            PKG_ENTRY_ID__KEYMAP_RP__08__005_PNG = 0x00001694,
            PKG_ENTRY_ID__KEYMAP_RP__08__006_PNG = 0x00001695,
            PKG_ENTRY_ID__KEYMAP_RP__08__007_PNG = 0x00001696,
            PKG_ENTRY_ID__KEYMAP_RP__08__008_PNG = 0x00001697,
            PKG_ENTRY_ID__KEYMAP_RP__08__009_PNG = 0x00001698,
            PKG_ENTRY_ID__KEYMAP_RP__08__010_PNG = 0x00001699,
            PKG_ENTRY_ID__KEYMAP_RP__09__001_PNG = 0x000016A0,
            PKG_ENTRY_ID__KEYMAP_RP__09__002_PNG = 0x000016A1,
            PKG_ENTRY_ID__KEYMAP_RP__09__003_PNG = 0x000016A2,
            PKG_ENTRY_ID__KEYMAP_RP__09__004_PNG = 0x000016A3,
            PKG_ENTRY_ID__KEYMAP_RP__09__005_PNG = 0x000016A4,
            PKG_ENTRY_ID__KEYMAP_RP__09__006_PNG = 0x000016A5,
            PKG_ENTRY_ID__KEYMAP_RP__09__007_PNG = 0x000016A6,
            PKG_ENTRY_ID__KEYMAP_RP__09__008_PNG = 0x000016A7,
            PKG_ENTRY_ID__KEYMAP_RP__09__009_PNG = 0x000016A8,
            PKG_ENTRY_ID__KEYMAP_RP__09__010_PNG = 0x000016A9,
            PKG_ENTRY_ID__KEYMAP_RP__10__001_PNG = 0x000016B0,
            PKG_ENTRY_ID__KEYMAP_RP__10__002_PNG = 0x000016B1,
            PKG_ENTRY_ID__KEYMAP_RP__10__003_PNG = 0x000016B2,
            PKG_ENTRY_ID__KEYMAP_RP__10__004_PNG = 0x000016B3,
            PKG_ENTRY_ID__KEYMAP_RP__10__005_PNG = 0x000016B4,
            PKG_ENTRY_ID__KEYMAP_RP__10__006_PNG = 0x000016B5,
            PKG_ENTRY_ID__KEYMAP_RP__10__007_PNG = 0x000016B6,
            PKG_ENTRY_ID__KEYMAP_RP__10__008_PNG = 0x000016B7,
            PKG_ENTRY_ID__KEYMAP_RP__10__009_PNG = 0x000016B8,
            PKG_ENTRY_ID__KEYMAP_RP__10__010_PNG = 0x000016B9,
            PKG_ENTRY_ID__KEYMAP_RP__11__001_PNG = 0x000016C0,
            PKG_ENTRY_ID__KEYMAP_RP__11__002_PNG = 0x000016C1,
            PKG_ENTRY_ID__KEYMAP_RP__11__003_PNG = 0x000016C2,
            PKG_ENTRY_ID__KEYMAP_RP__11__004_PNG = 0x000016C3,
            PKG_ENTRY_ID__KEYMAP_RP__11__005_PNG = 0x000016C4,
            PKG_ENTRY_ID__KEYMAP_RP__11__006_PNG = 0x000016C5,
            PKG_ENTRY_ID__KEYMAP_RP__11__007_PNG = 0x000016C6,
            PKG_ENTRY_ID__KEYMAP_RP__11__008_PNG = 0x000016C7,
            PKG_ENTRY_ID__KEYMAP_RP__11__009_PNG = 0x000016C8,
            PKG_ENTRY_ID__KEYMAP_RP__11__010_PNG = 0x000016C9,
            PKG_ENTRY_ID__KEYMAP_RP__12__001_PNG = 0x000016D0,
            PKG_ENTRY_ID__KEYMAP_RP__12__002_PNG = 0x000016D1,
            PKG_ENTRY_ID__KEYMAP_RP__12__003_PNG = 0x000016D2,
            PKG_ENTRY_ID__KEYMAP_RP__12__004_PNG = 0x000016D3,
            PKG_ENTRY_ID__KEYMAP_RP__12__005_PNG = 0x000016D4,
            PKG_ENTRY_ID__KEYMAP_RP__12__006_PNG = 0x000016D5,
            PKG_ENTRY_ID__KEYMAP_RP__12__007_PNG = 0x000016D6,
            PKG_ENTRY_ID__KEYMAP_RP__12__008_PNG = 0x000016D7,
            PKG_ENTRY_ID__KEYMAP_RP__12__009_PNG = 0x000016D8,
            PKG_ENTRY_ID__KEYMAP_RP__12__010_PNG = 0x000016D9,
            PKG_ENTRY_ID__KEYMAP_RP__13__001_PNG = 0x000016E0,
            PKG_ENTRY_ID__KEYMAP_RP__13__002_PNG = 0x000016E1,
            PKG_ENTRY_ID__KEYMAP_RP__13__003_PNG = 0x000016E2,
            PKG_ENTRY_ID__KEYMAP_RP__13__004_PNG = 0x000016E3,
            PKG_ENTRY_ID__KEYMAP_RP__13__005_PNG = 0x000016E4,
            PKG_ENTRY_ID__KEYMAP_RP__13__006_PNG = 0x000016E5,
            PKG_ENTRY_ID__KEYMAP_RP__13__007_PNG = 0x000016E6,
            PKG_ENTRY_ID__KEYMAP_RP__13__008_PNG = 0x000016E7,
            PKG_ENTRY_ID__KEYMAP_RP__13__009_PNG = 0x000016E8,
            PKG_ENTRY_ID__KEYMAP_RP__13__010_PNG = 0x000016E9,
            PKG_ENTRY_ID__KEYMAP_RP__14__001_PNG = 0x000016F0,
            PKG_ENTRY_ID__KEYMAP_RP__14__002_PNG = 0x000016F1,
            PKG_ENTRY_ID__KEYMAP_RP__14__003_PNG = 0x000016F2,
            PKG_ENTRY_ID__KEYMAP_RP__14__004_PNG = 0x000016F3,
            PKG_ENTRY_ID__KEYMAP_RP__14__005_PNG = 0x000016F4,
            PKG_ENTRY_ID__KEYMAP_RP__14__006_PNG = 0x000016F5,
            PKG_ENTRY_ID__KEYMAP_RP__14__007_PNG = 0x000016F6,
            PKG_ENTRY_ID__KEYMAP_RP__14__008_PNG = 0x000016F7,
            PKG_ENTRY_ID__KEYMAP_RP__14__009_PNG = 0x000016F8,
            PKG_ENTRY_ID__KEYMAP_RP__14__010_PNG = 0x000016F9,
            PKG_ENTRY_ID__KEYMAP_RP__15__001_PNG = 0x00001700,
            PKG_ENTRY_ID__KEYMAP_RP__15__002_PNG = 0x00001701,
            PKG_ENTRY_ID__KEYMAP_RP__15__003_PNG = 0x00001702,
            PKG_ENTRY_ID__KEYMAP_RP__15__004_PNG = 0x00001703,
            PKG_ENTRY_ID__KEYMAP_RP__15__005_PNG = 0x00001704,
            PKG_ENTRY_ID__KEYMAP_RP__15__006_PNG = 0x00001705,
            PKG_ENTRY_ID__KEYMAP_RP__15__007_PNG = 0x00001706,
            PKG_ENTRY_ID__KEYMAP_RP__15__008_PNG = 0x00001707,
            PKG_ENTRY_ID__KEYMAP_RP__15__009_PNG = 0x00001708,
            PKG_ENTRY_ID__KEYMAP_RP__15__010_PNG = 0x00001709,
            PKG_ENTRY_ID__KEYMAP_RP__16__001_PNG = 0x00001710,
            PKG_ENTRY_ID__KEYMAP_RP__16__002_PNG = 0x00001711,
            PKG_ENTRY_ID__KEYMAP_RP__16__003_PNG = 0x00001712,
            PKG_ENTRY_ID__KEYMAP_RP__16__004_PNG = 0x00001713,
            PKG_ENTRY_ID__KEYMAP_RP__16__005_PNG = 0x00001714,
            PKG_ENTRY_ID__KEYMAP_RP__16__006_PNG = 0x00001715,
            PKG_ENTRY_ID__KEYMAP_RP__16__007_PNG = 0x00001716,
            PKG_ENTRY_ID__KEYMAP_RP__16__008_PNG = 0x00001717,
            PKG_ENTRY_ID__KEYMAP_RP__16__009_PNG = 0x00001718,
            PKG_ENTRY_ID__KEYMAP_RP__16__010_PNG = 0x00001719,
            PKG_ENTRY_ID__KEYMAP_RP__17__001_PNG = 0x00001720,
            PKG_ENTRY_ID__KEYMAP_RP__17__002_PNG = 0x00001721,
            PKG_ENTRY_ID__KEYMAP_RP__17__003_PNG = 0x00001722,
            PKG_ENTRY_ID__KEYMAP_RP__17__004_PNG = 0x00001723,
            PKG_ENTRY_ID__KEYMAP_RP__17__005_PNG = 0x00001724,
            PKG_ENTRY_ID__KEYMAP_RP__17__006_PNG = 0x00001725,
            PKG_ENTRY_ID__KEYMAP_RP__17__007_PNG = 0x00001726,
            PKG_ENTRY_ID__KEYMAP_RP__17__008_PNG = 0x00001727,
            PKG_ENTRY_ID__KEYMAP_RP__17__009_PNG = 0x00001728,
            PKG_ENTRY_ID__KEYMAP_RP__17__010_PNG = 0x00001729,
            PKG_ENTRY_ID__KEYMAP_RP__18__001_PNG = 0x00001730,
            PKG_ENTRY_ID__KEYMAP_RP__18__002_PNG = 0x00001731,
            PKG_ENTRY_ID__KEYMAP_RP__18__003_PNG = 0x00001732,
            PKG_ENTRY_ID__KEYMAP_RP__18__004_PNG = 0x00001733,
            PKG_ENTRY_ID__KEYMAP_RP__18__005_PNG = 0x00001734,
            PKG_ENTRY_ID__KEYMAP_RP__18__006_PNG = 0x00001735,
            PKG_ENTRY_ID__KEYMAP_RP__18__007_PNG = 0x00001736,
            PKG_ENTRY_ID__KEYMAP_RP__18__008_PNG = 0x00001737,
            PKG_ENTRY_ID__KEYMAP_RP__18__009_PNG = 0x00001738,
            PKG_ENTRY_ID__KEYMAP_RP__18__010_PNG = 0x00001739,
            PKG_ENTRY_ID__KEYMAP_RP__19__001_PNG = 0x00001740,
            PKG_ENTRY_ID__KEYMAP_RP__19__002_PNG = 0x00001741,
            PKG_ENTRY_ID__KEYMAP_RP__19__003_PNG = 0x00001742,
            PKG_ENTRY_ID__KEYMAP_RP__19__004_PNG = 0x00001743,
            PKG_ENTRY_ID__KEYMAP_RP__19__005_PNG = 0x00001744,
            PKG_ENTRY_ID__KEYMAP_RP__19__006_PNG = 0x00001745,
            PKG_ENTRY_ID__KEYMAP_RP__19__007_PNG = 0x00001746,
            PKG_ENTRY_ID__KEYMAP_RP__19__008_PNG = 0x00001747,
            PKG_ENTRY_ID__KEYMAP_RP__19__009_PNG = 0x00001748,
            PKG_ENTRY_ID__KEYMAP_RP__19__010_PNG = 0x00001749,
            PKG_ENTRY_ID__KEYMAP_RP__20__001_PNG = 0x00001750,
            PKG_ENTRY_ID__KEYMAP_RP__20__002_PNG = 0x00001751,
            PKG_ENTRY_ID__KEYMAP_RP__20__003_PNG = 0x00001752,
            PKG_ENTRY_ID__KEYMAP_RP__20__004_PNG = 0x00001753,
            PKG_ENTRY_ID__KEYMAP_RP__20__005_PNG = 0x00001754,
            PKG_ENTRY_ID__KEYMAP_RP__20__006_PNG = 0x00001755,
            PKG_ENTRY_ID__KEYMAP_RP__20__007_PNG = 0x00001756,
            PKG_ENTRY_ID__KEYMAP_RP__20__008_PNG = 0x00001757,
            PKG_ENTRY_ID__KEYMAP_RP__20__009_PNG = 0x00001758,
            PKG_ENTRY_ID__KEYMAP_RP__20__010_PNG = 0x00001759,
            PKG_ENTRY_ID__KEYMAP_RP__21__001_PNG = 0x00001760,
            PKG_ENTRY_ID__KEYMAP_RP__21__002_PNG = 0x00001761,
            PKG_ENTRY_ID__KEYMAP_RP__21__003_PNG = 0x00001762,
            PKG_ENTRY_ID__KEYMAP_RP__21__004_PNG = 0x00001763,
            PKG_ENTRY_ID__KEYMAP_RP__21__005_PNG = 0x00001764,
            PKG_ENTRY_ID__KEYMAP_RP__21__006_PNG = 0x00001765,
            PKG_ENTRY_ID__KEYMAP_RP__21__007_PNG = 0x00001766,
            PKG_ENTRY_ID__KEYMAP_RP__21__008_PNG = 0x00001767,
            PKG_ENTRY_ID__KEYMAP_RP__21__009_PNG = 0x00001768,
            PKG_ENTRY_ID__KEYMAP_RP__21__010_PNG = 0x00001769,
            PKG_ENTRY_ID__KEYMAP_RP__22__001_PNG = 0x00001770,
            PKG_ENTRY_ID__KEYMAP_RP__22__002_PNG = 0x00001771,
            PKG_ENTRY_ID__KEYMAP_RP__22__003_PNG = 0x00001772,
            PKG_ENTRY_ID__KEYMAP_RP__22__004_PNG = 0x00001773,
            PKG_ENTRY_ID__KEYMAP_RP__22__005_PNG = 0x00001774,
            PKG_ENTRY_ID__KEYMAP_RP__22__006_PNG = 0x00001775,
            PKG_ENTRY_ID__KEYMAP_RP__22__007_PNG = 0x00001776,
            PKG_ENTRY_ID__KEYMAP_RP__22__008_PNG = 0x00001777,
            PKG_ENTRY_ID__KEYMAP_RP__22__009_PNG = 0x00001778,
            PKG_ENTRY_ID__KEYMAP_RP__22__010_PNG = 0x00001779,
            PKG_ENTRY_ID__KEYMAP_RP__23__001_PNG = 0x00001780,
            PKG_ENTRY_ID__KEYMAP_RP__23__002_PNG = 0x00001781,
            PKG_ENTRY_ID__KEYMAP_RP__23__003_PNG = 0x00001782,
            PKG_ENTRY_ID__KEYMAP_RP__23__004_PNG = 0x00001783,
            PKG_ENTRY_ID__KEYMAP_RP__23__005_PNG = 0x00001784,
            PKG_ENTRY_ID__KEYMAP_RP__23__006_PNG = 0x00001785,
            PKG_ENTRY_ID__KEYMAP_RP__23__007_PNG = 0x00001786,
            PKG_ENTRY_ID__KEYMAP_RP__23__008_PNG = 0x00001787,
            PKG_ENTRY_ID__KEYMAP_RP__23__009_PNG = 0x00001788,
            PKG_ENTRY_ID__KEYMAP_RP__23__010_PNG = 0x00001789,
            PKG_ENTRY_ID__KEYMAP_RP__24__001_PNG = 0x00001790,
            PKG_ENTRY_ID__KEYMAP_RP__24__002_PNG = 0x00001791,
            PKG_ENTRY_ID__KEYMAP_RP__24__003_PNG = 0x00001792,
            PKG_ENTRY_ID__KEYMAP_RP__24__004_PNG = 0x00001793,
            PKG_ENTRY_ID__KEYMAP_RP__24__005_PNG = 0x00001794,
            PKG_ENTRY_ID__KEYMAP_RP__24__006_PNG = 0x00001795,
            PKG_ENTRY_ID__KEYMAP_RP__24__007_PNG = 0x00001796,
            PKG_ENTRY_ID__KEYMAP_RP__24__008_PNG = 0x00001797,
            PKG_ENTRY_ID__KEYMAP_RP__24__009_PNG = 0x00001798,
            PKG_ENTRY_ID__KEYMAP_RP__24__010_PNG = 0x00001799,
            PKG_ENTRY_ID__KEYMAP_RP__25__001_PNG = 0x000017A0,
            PKG_ENTRY_ID__KEYMAP_RP__25__002_PNG = 0x000017A1,
            PKG_ENTRY_ID__KEYMAP_RP__25__003_PNG = 0x000017A2,
            PKG_ENTRY_ID__KEYMAP_RP__25__004_PNG = 0x000017A3,
            PKG_ENTRY_ID__KEYMAP_RP__25__005_PNG = 0x000017A4,
            PKG_ENTRY_ID__KEYMAP_RP__25__006_PNG = 0x000017A5,
            PKG_ENTRY_ID__KEYMAP_RP__25__007_PNG = 0x000017A6,
            PKG_ENTRY_ID__KEYMAP_RP__25__008_PNG = 0x000017A7,
            PKG_ENTRY_ID__KEYMAP_RP__25__009_PNG = 0x000017A8,
            PKG_ENTRY_ID__KEYMAP_RP__25__010_PNG = 0x000017A9,
            PKG_ENTRY_ID__KEYMAP_RP__26__001_PNG = 0x000017B0,
            PKG_ENTRY_ID__KEYMAP_RP__26__002_PNG = 0x000017B1,
            PKG_ENTRY_ID__KEYMAP_RP__26__003_PNG = 0x000017B2,
            PKG_ENTRY_ID__KEYMAP_RP__26__004_PNG = 0x000017B3,
            PKG_ENTRY_ID__KEYMAP_RP__26__005_PNG = 0x000017B4,
            PKG_ENTRY_ID__KEYMAP_RP__26__006_PNG = 0x000017B5,
            PKG_ENTRY_ID__KEYMAP_RP__26__007_PNG = 0x000017B6,
            PKG_ENTRY_ID__KEYMAP_RP__26__008_PNG = 0x000017B7,
            PKG_ENTRY_ID__KEYMAP_RP__26__009_PNG = 0x000017B8,
            PKG_ENTRY_ID__KEYMAP_RP__26__010_PNG = 0x000017B9,
            PKG_ENTRY_ID__KEYMAP_RP__27__001_PNG = 0x000017C0,
            PKG_ENTRY_ID__KEYMAP_RP__27__002_PNG = 0x000017C1,
            PKG_ENTRY_ID__KEYMAP_RP__27__003_PNG = 0x000017C2,
            PKG_ENTRY_ID__KEYMAP_RP__27__004_PNG = 0x000017C3,
            PKG_ENTRY_ID__KEYMAP_RP__27__005_PNG = 0x000017C4,
            PKG_ENTRY_ID__KEYMAP_RP__27__006_PNG = 0x000017C5,
            PKG_ENTRY_ID__KEYMAP_RP__27__007_PNG = 0x000017C6,
            PKG_ENTRY_ID__KEYMAP_RP__27__008_PNG = 0x000017C7,
            PKG_ENTRY_ID__KEYMAP_RP__27__009_PNG = 0x000017C8,
            PKG_ENTRY_ID__KEYMAP_RP__27__010_PNG = 0x000017C9,
            PKG_ENTRY_ID__KEYMAP_RP__28__001_PNG = 0x000017D0,
            PKG_ENTRY_ID__KEYMAP_RP__28__002_PNG = 0x000017D1,
            PKG_ENTRY_ID__KEYMAP_RP__28__003_PNG = 0x000017D2,
            PKG_ENTRY_ID__KEYMAP_RP__28__004_PNG = 0x000017D3,
            PKG_ENTRY_ID__KEYMAP_RP__28__005_PNG = 0x000017D4,
            PKG_ENTRY_ID__KEYMAP_RP__28__006_PNG = 0x000017D5,
            PKG_ENTRY_ID__KEYMAP_RP__28__007_PNG = 0x000017D6,
            PKG_ENTRY_ID__KEYMAP_RP__28__008_PNG = 0x000017D7,
            PKG_ENTRY_ID__KEYMAP_RP__28__009_PNG = 0x000017D8,
            PKG_ENTRY_ID__KEYMAP_RP__28__010_PNG = 0x000017D9,
            PKG_ENTRY_ID__KEYMAP_RP__29__001_PNG = 0x000017E0,
            PKG_ENTRY_ID__KEYMAP_RP__29__002_PNG = 0x000017E1,
            PKG_ENTRY_ID__KEYMAP_RP__29__003_PNG = 0x000017E2,
            PKG_ENTRY_ID__KEYMAP_RP__29__004_PNG = 0x000017E3,
            PKG_ENTRY_ID__KEYMAP_RP__29__005_PNG = 0x000017E4,
            PKG_ENTRY_ID__KEYMAP_RP__29__006_PNG = 0x000017E5,
            PKG_ENTRY_ID__KEYMAP_RP__29__007_PNG = 0x000017E6,
            PKG_ENTRY_ID__KEYMAP_RP__29__008_PNG = 0x000017E7,
            PKG_ENTRY_ID__KEYMAP_RP__29__009_PNG = 0x000017E8,
            PKG_ENTRY_ID__KEYMAP_RP__29__010_PNG = 0x000017E9,
            PKG_ENTRY_ID__KEYMAP_RP__30__001_PNG = 0x000017F0,
            PKG_ENTRY_ID__KEYMAP_RP__30__002_PNG = 0x000017F1,
            PKG_ENTRY_ID__KEYMAP_RP__30__003_PNG = 0x000017F2,
            PKG_ENTRY_ID__KEYMAP_RP__30__004_PNG = 0x000017F3,
            PKG_ENTRY_ID__KEYMAP_RP__30__005_PNG = 0x000017F4,
            PKG_ENTRY_ID__KEYMAP_RP__30__006_PNG = 0x000017F5,
            PKG_ENTRY_ID__KEYMAP_RP__30__007_PNG = 0x000017F6,
            PKG_ENTRY_ID__KEYMAP_RP__30__008_PNG = 0x000017F7,
            PKG_ENTRY_ID__KEYMAP_RP__30__009_PNG = 0x000017F8,
            PKG_ENTRY_ID__KEYMAP_RP__30__010_PNG = 0x000017F9,
        }

        #endregion

        #region RSA Signature Keys

        private static RSAParameters RSA_TOP_SIGNATURE = new RSAParameters() {
            // TOP_SIGNATURE_PRIVATE_EXPONENT
            D = new byte[256] {
                0x32, 0xD9, 0x03, 0x90, 0x8F, 0xBD, 0xB0, 0x8F, 0x57, 0x2B, 0x28, 0x5E, 0x0B, 0x8D, 0xB3, 0xEA,
                0x5C, 0xD1, 0x7E, 0xA8, 0x90, 0x88, 0x8C, 0xDD, 0x6A, 0x80, 0xBB, 0xB1, 0xDF, 0xC1, 0xF7, 0x0D,
                0xAA, 0x32, 0xF0, 0xB7, 0x7C, 0xCB, 0x88, 0x80, 0x0E, 0x8B, 0x64, 0xB0, 0xBE, 0x4C, 0xD6, 0x0E,
                0x9B, 0x8C, 0x1E, 0x2A, 0x64, 0xE1, 0xF3, 0x5C, 0xD7, 0x76, 0x01, 0x41, 0x5E, 0x93, 0x5C, 0x94,
                0xFE, 0xDD, 0x46, 0x62, 0xC3, 0x1B, 0x5A, 0xE2, 0xA0, 0xBC, 0x2D, 0xEB, 0xC3, 0x98, 0x0A, 0xA7,
                0xB7, 0x85, 0x69, 0x70, 0x68, 0x2B, 0x64, 0x4A, 0xB3, 0x1F, 0xCC, 0x7D, 0xDC, 0x7C, 0x26, 0xF4,
                0x77, 0xF6, 0x5C, 0xF2, 0xAE, 0x5A, 0x44, 0x2D, 0xD3, 0xAB, 0x16, 0x62, 0x04, 0x19, 0xBA, 0xFB,
                0x90, 0xFF, 0xE2, 0x30, 0x50, 0x89, 0x6E, 0xCB, 0x56, 0xB2, 0xEB, 0xC0, 0x91, 0x16, 0x92, 0x5E,
                0x30, 0x8E, 0xAE, 0xC7, 0x94, 0x5D, 0xFD, 0x35, 0xE1, 0x20, 0xF8, 0xAD, 0x3E, 0xBC, 0x08, 0xBF,
                0xC0, 0x36, 0x74, 0x9F, 0xD5, 0xBB, 0x52, 0x08, 0xFD, 0x06, 0x66, 0xF3, 0x7A, 0xB3, 0x04, 0xF4,
                0x75, 0x29, 0x5D, 0xE9, 0x5F, 0xAA, 0x10, 0x30, 0xB2, 0x0F, 0x5A, 0x1A, 0xC1, 0x2A, 0xB3, 0xFE,
                0xCB, 0x21, 0xAD, 0x80, 0xEC, 0x8F, 0x20, 0x09, 0x1C, 0xDB, 0xC5, 0x58, 0x94, 0xC2, 0x9C, 0xC6,
                0xCE, 0x82, 0x65, 0x3E, 0x57, 0x90, 0xBC, 0xA9, 0x8B, 0x06, 0xB4, 0xF0, 0x72, 0xF6, 0x77, 0xDF,
                0x98, 0x64, 0xF1, 0xEC, 0xFE, 0x37, 0x2D, 0xBC, 0xAE, 0x8C, 0x08, 0x81, 0x1F, 0xC3, 0xC9, 0x89,
                0x1A, 0xC7, 0x42, 0x82, 0x4B, 0x2E, 0xDC, 0x8E, 0x8D, 0x73, 0xCE, 0xB1, 0xCC, 0x01, 0xD9, 0x08,
                0x70, 0x87, 0x3C, 0x44, 0x08, 0xEC, 0x49, 0x8F, 0x81, 0x5A, 0xE2, 0x40, 0xFF, 0x77, 0xFC, 0x0D
            },

            // TOP_SIGNATURE_DMP1
            DP = new byte[128] {
                0x52, 0xCC, 0x2D, 0xA0, 0x9C, 0x9E, 0x75, 0xE7, 0x28, 0xEE, 0x3D, 0xDE, 0xE3, 0x45, 0xD1, 0x4F,
                0x94, 0x1C, 0xCC, 0xC8, 0x87, 0x29, 0x45, 0x3B, 0x8D, 0x6E, 0xAB, 0x6E, 0x2A, 0xA7, 0xC7, 0x15,
                0x43, 0xA3, 0x04, 0x8F, 0x90, 0x5F, 0xEB, 0xF3, 0x38, 0x4A, 0x77, 0xFA, 0x36, 0xB7, 0x15, 0x76,
                0xB6, 0x01, 0x1A, 0x8E, 0x25, 0x87, 0x82, 0xF1, 0x55, 0xD8, 0xC6, 0x43, 0x2A, 0xC0, 0xE5, 0x98,
                0xC9, 0x32, 0xD1, 0x94, 0x6F, 0xD9, 0x01, 0xBA, 0x06, 0x81, 0xE0, 0x6D, 0x88, 0xF2, 0x24, 0x2A,
                0x25, 0x01, 0x64, 0x5C, 0xBF, 0xF2, 0xD9, 0x99, 0x67, 0x3E, 0xF6, 0x72, 0xEE, 0xE4, 0xE2, 0x33,
                0x5C, 0xF8, 0x00, 0x40, 0xE3, 0x2A, 0x9A, 0xF4, 0x3D, 0x22, 0x86, 0x44, 0x3C, 0xFB, 0x0A, 0xA5,
                0x7C, 0x3F, 0xCC, 0xF5, 0xF1, 0x16, 0xC4, 0xAC, 0x88, 0xB4, 0xDE, 0x62, 0x94, 0x92, 0x6A, 0x13
            },

            // TOP_SIGNATURE_DMQ1
            DQ = new byte[128] {
                0x7C, 0x9D, 0xAD, 0x39, 0xE0, 0xD5, 0x60, 0x14, 0x94, 0x48, 0x19, 0x7F, 0x88, 0x95, 0xD5, 0x8B,
                0x80, 0xAD, 0x85, 0x8A, 0x4B, 0x77, 0x37, 0x85, 0xD0, 0x77, 0xBB, 0xBF, 0x89, 0x71, 0x4A, 0x72,
                0xCB, 0x72, 0x68, 0x38, 0xEC, 0x02, 0xC6, 0x7D, 0xC6, 0x44, 0x06, 0x33, 0x51, 0x1C, 0xC0, 0xFF,
                0x95, 0x8F, 0x0D, 0x75, 0xDC, 0x25, 0xBB, 0x0B, 0x73, 0x91, 0xA9, 0x6D, 0x42, 0xD8, 0x03, 0xB7,
                0x68, 0xD4, 0x1E, 0x75, 0x62, 0xA3, 0x70, 0x35, 0x79, 0x78, 0x00, 0xC8, 0xF5, 0xEF, 0x15, 0xB9,
                0xFC, 0x4E, 0x47, 0x5A, 0xC8, 0x70, 0x70, 0x5B, 0x52, 0x98, 0xC0, 0xC2, 0x58, 0x4A, 0x70, 0x96,
                0xCC, 0xB8, 0x10, 0xE1, 0x2F, 0x78, 0x8B, 0x2B, 0xA1, 0x7F, 0xF9, 0xAC, 0xDE, 0xF0, 0xBB, 0x2B,
                0xE2, 0x66, 0xE3, 0x22, 0x92, 0x31, 0x21, 0x57, 0x92, 0xC4, 0xB8, 0xF2, 0x3E, 0x76, 0x20, 0x37
            },

            // TOP_SIGNATURE_PUBLIC_EXPONENT
            Exponent = new byte[4] {
                0x00, 0x01, 0x00, 0x01
            },

            // TOP_SIGNATURE_INVERSEQ - 0000000000640D10 - 0000000000640D8F
            InverseQ = new byte[128] {
                0x45, 0x97, 0x55, 0xD4, 0x22, 0x08, 0x5E, 0xF3, 0x5C, 0xB4, 0x05, 0x7A, 0xFD, 0xAA, 0x42, 0x42,
                0xAD, 0x9A, 0x8C, 0xA0, 0x6C, 0xBB, 0x1D, 0x68, 0x54, 0x54, 0x6E, 0x3E, 0x32, 0xE3, 0x53, 0x73,
                0x76, 0xF1, 0x3E, 0x01, 0xEA, 0xD3, 0xCF, 0xEB, 0xEB, 0x23, 0x3E, 0xC0, 0xBE, 0xCE, 0xEC, 0x2C,
                0x89, 0x5F, 0xA8, 0x27, 0x3A, 0x4C, 0xB7, 0xE6, 0x74, 0xBC, 0x45, 0x4C, 0x26, 0xC8, 0x25, 0xFF,
                0x34, 0x63, 0x25, 0x37, 0xE1, 0x48, 0x10, 0xC1, 0x93, 0xA6, 0xAF, 0xEB, 0xBA, 0xE3, 0xA2, 0xF1,
                0x3D, 0xEF, 0x63, 0xD8, 0xF4, 0xFD, 0xD3, 0xEE, 0xE2, 0x5D, 0xE9, 0x33, 0xCC, 0xAD, 0xBA, 0x75,
                0x5C, 0x85, 0xAF, 0xCE, 0xA9, 0x3D, 0xD1, 0xA2, 0x17, 0xF3, 0xF6, 0x98, 0xB3, 0x50, 0x8E, 0x5E,
                0xF6, 0xEB, 0x02, 0x8E, 0xA1, 0x62, 0xA7, 0xD6, 0x2C, 0xEC, 0x91, 0xFF, 0x15, 0x40, 0xD2, 0xE3
            },

            // TOP_SIGNATURE_MODULUS
            Modulus = new byte[256] {
                0xD2, 0x12, 0xFC, 0x33, 0x5F, 0x6D, 0xDB, 0x83, 0x16, 0x09, 0x62, 0x8B, 0x03, 0x56, 0x27, 0x37,
                0x82, 0xD4, 0x77, 0x85, 0x35, 0x29, 0x39, 0x2D, 0x52, 0x6B, 0x8C, 0x4C, 0x8C, 0xFB, 0x06, 0xC1,
                0x84, 0x5B, 0xE7, 0xD4, 0xF7, 0xBC, 0xD2, 0x4E, 0x62, 0x45, 0xCD, 0x2A, 0xBB, 0xD7, 0x77, 0x76,
                0x45, 0x36, 0x55, 0x27, 0x3F, 0xB3, 0xF5, 0xF9, 0x8E, 0xDA, 0x4B, 0xEF, 0xAA, 0x59, 0xAE, 0xB3,
                0x9B, 0xEA, 0x54, 0x98, 0xD2, 0x06, 0x32, 0x6A, 0x58, 0x31, 0x2A, 0xE0, 0xD4, 0x4F, 0x90, 0xB5,
                0x0A, 0x7D, 0xEC, 0xF4, 0x3A, 0x9C, 0x52, 0x67, 0x2D, 0x99, 0x31, 0x8E, 0x0C, 0x43, 0xE6, 0x82,
                0xFE, 0x07, 0x46, 0xE1, 0x2E, 0x50, 0xD4, 0x1F, 0x2D, 0x2F, 0x7E, 0xD9, 0x08, 0xBA, 0x06, 0xB3,
                0xBF, 0x2E, 0x20, 0x3F, 0x4E, 0x3F, 0xFE, 0x44, 0xFF, 0xAA, 0x50, 0x43, 0x57, 0x91, 0x69, 0x94,
                0x49, 0x15, 0x82, 0x82, 0xE4, 0x0F, 0x4C, 0x8D, 0x9D, 0x2C, 0xC9, 0x5B, 0x1D, 0x64, 0xBF, 0x88,
                0x8B, 0xD4, 0xC5, 0x94, 0xE7, 0x65, 0x47, 0x84, 0x1E, 0xE5, 0x79, 0x10, 0xFB, 0x98, 0x93, 0x47,
                0xB9, 0x7D, 0x85, 0x12, 0xA6, 0x40, 0x98, 0x2C, 0xF7, 0x92, 0xBC, 0x95, 0x19, 0x32, 0xED, 0xE8,
                0x90, 0x56, 0x0D, 0x65, 0xC1, 0xAA, 0x78, 0xC6, 0x2E, 0x54, 0xFD, 0x5F, 0x54, 0xA1, 0xF6, 0x7E,
                0xE5, 0xE0, 0x5F, 0x61, 0xC1, 0x20, 0xB4, 0xB9, 0xB4, 0x33, 0x08, 0x70, 0xE4, 0xDF, 0x89, 0x56,
                0xED, 0x01, 0x29, 0x46, 0x77, 0x5F, 0x8C, 0xB8, 0xA9, 0xF5, 0x1E, 0x2E, 0xB3, 0xB9, 0xBF, 0xE0,
                0x09, 0xB7, 0x8D, 0x28, 0xD4, 0xA6, 0xC3, 0xB8, 0x1E, 0x1F, 0x07, 0xEB, 0xB4, 0x12, 0x0B, 0x95,
                0xB8, 0x85, 0x30, 0xFD, 0xDC, 0x39, 0x13, 0xD0, 0x7C, 0xDC, 0x8F, 0xED, 0xF9, 0xC9, 0xA3, 0xC1
            },

            // TOP_SIGNATURE_P
            P = new byte[128] {
                0xF9, 0x67, 0xAD, 0x99, 0x12, 0x31, 0x0C, 0x56, 0xA2, 0x2E, 0x16, 0x1C, 0x46, 0xB3, 0x4D, 0x5B,
                0x43, 0xBE, 0x42, 0xA2, 0xF6, 0x86, 0x96, 0x80, 0x42, 0xC3, 0xC7, 0x3F, 0xC3, 0x42, 0xF5, 0x87,
                0x49, 0x33, 0x9F, 0x07, 0x5D, 0x6E, 0x2C, 0x04, 0xFD, 0xE3, 0xE1, 0xB2, 0xAE, 0x0A, 0x0C, 0xF0,
                0xC7, 0xA6, 0x1C, 0xA1, 0x63, 0x50, 0xC8, 0x09, 0x9C, 0x51, 0x24, 0x52, 0x6C, 0x5E, 0x5E, 0xBD,
                0x1E, 0x27, 0x06, 0xBB, 0xBC, 0x9E, 0x94, 0xE1, 0x35, 0xD4, 0x6D, 0xB3, 0xCB, 0x3C, 0x68, 0xDD,
                0x68, 0xB3, 0xFE, 0x6C, 0xCB, 0x8D, 0x82, 0x20, 0x76, 0x23, 0x63, 0xB7, 0xE9, 0x68, 0x10, 0x01,
                0x4E, 0xDC, 0xBA, 0x27, 0x5D, 0x01, 0xC1, 0x2D, 0x80, 0x5E, 0x2B, 0xAF, 0x82, 0x6B, 0xD8, 0x84,
                0xB6, 0x10, 0x52, 0x86, 0xA7, 0x89, 0x8E, 0xAE, 0x9A, 0xE2, 0x89, 0xC6, 0xF7, 0xD5, 0x87, 0xFB
            },

            // TOP_SIGNATURE_Q
            Q = new byte[128] {
                0xD7, 0xA1, 0x0F, 0x9A, 0x8B, 0xF2, 0xC9, 0x11, 0x95, 0x32, 0x9A, 0x8C, 0xF0, 0xD9, 0x40, 0x47,
                0xF5, 0x68, 0xA0, 0x0D, 0xBD, 0xC1, 0xFC, 0x43, 0x2F, 0x65, 0xF9, 0xC3, 0x61, 0x0F, 0x25, 0x77,
                0x54, 0xAD, 0xD7, 0x58, 0xAC, 0x84, 0x40, 0x60, 0x8D, 0x3F, 0xF3, 0x65, 0x89, 0x75, 0xB5, 0xC6,
                0x2C, 0x51, 0x1A, 0x2F, 0x1F, 0x22, 0xE4, 0x43, 0x11, 0x54, 0xBE, 0xC9, 0xB4, 0xC7, 0xB5, 0x1B,
                0x05, 0x0B, 0xBC, 0x56, 0x9A, 0xCD, 0x4A, 0xD9, 0x73, 0x68, 0x5E, 0x5C, 0xFB, 0x92, 0xB7, 0x8B,
                0x0D, 0xFF, 0xF5, 0x07, 0xCA, 0xB4, 0xC8, 0x9B, 0x96, 0x3C, 0x07, 0x9E, 0x3E, 0x6B, 0x2A, 0x11,
                0xF2, 0x8A, 0xB1, 0x8A, 0xD7, 0x2E, 0x1B, 0xA5, 0x53, 0x24, 0x06, 0xED, 0x50, 0xB8, 0x90, 0x67,
                0xB1, 0xE2, 0x41, 0xC6, 0x92, 0x01, 0xEE, 0x10, 0xF0, 0x61, 0xBB, 0xFB, 0xB2, 0x7D, 0x4A, 0x73
            }
        };

        #endregion

        #region Keystone Keys

        private static byte[] keystone_passcode_secret = new byte[32] 
        {
            0xC7, 0x44, 0x05, 0xF6, 0x74, 0x24, 0xBA, 0x34, 0x2B, 0xC1, 0x27, 0x62, 0x51, 0xBB, 0xC2, 0xF5,
            0x55, 0xF1, 0x60, 0x25, 0xB6, 0xA1, 0xB6, 0x71, 0x47, 0x80, 0xDB, 0xAE, 0xC8, 0x52, 0xFA, 0x2F
        };

        private static byte[] keystone_ks_secret = new byte[32]
        {
            0x78, 0x3D, 0x6F, 0x3A, 0xE9, 0x1C, 0x0E, 0x07, 0x12, 0xFC, 0xAA, 0xB7, 0x95, 0x0B, 0xDE, 0x06,
            0x85, 0x5C, 0xF7, 0xA2, 0x2D, 0xCD, 0xBD, 0xE1, 0x27, 0xE9, 0xBF, 0xCB, 0xAD, 0x0F, 0xF0, 0xFE
        };

        #endregion

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the Package class on the specified file.
        /// </summary>
        /// <param name="FileName">The location of the file to load.</param>
        public Package(string FileName)
        {
            IO = new EndianIO(FileName, EndianType.BigEndian, true);
        }

        /// <summary>
        /// Initializes a new instance of the Package class on the specified byte array.
        /// </summary>
        /// <param name="Data">The byte array to load.</param>
        public Package(byte[] Data)
        {
            IO = new EndianIO(Data, EndianType.BigEndian, true);
        }

        /// <summary>
        /// Initializes a new instance of the Package class on the specified stream.
        /// </summary>
        /// <param name="Stream">The stream to load.</param>
        public Package(Stream Stream)
        {
            IO = new EndianIO(Stream, EndianType.BigEndian, true);
        }

        #endregion

        #region Private Methods

        private static uint ReverseBytes(uint val)
        {
            return (val & 0x000000FFU) << 24 | (val & 0x0000FF00U) << 8 |
                   (val & 0x00FF0000U) >> 8 | (val & 0xFF000000U) >> 24;
        }

        private static byte[] Sha256(byte[] data)
        {
            return SHA256.Create().ComputeHash(data);
        }

        private static byte[] HmacSha256(byte[] key, byte[] data)
        {
            var sha = new HMACSHA256(key);
            sha.ComputeHash(data);
            return sha.Hash;
        }

        private bool IsPasscodeValid(string data)
        {
            return Regex.IsMatch(data, @"^[A-Za-z0-9-_]+$");
        }

        private byte[] ComputeKeys(byte[] ContentId, byte[] Passcode, uint Index)
        {
            if (ContentId.Length != PKG_CONTENT_ID_SIZE)
                return null;

            if (Passcode.Length != PKG_PASSCODE_SIZE)
                return null;

            byte[] IndexBytes = Sha256(BitConverter.GetBytes(ReverseBytes(Index)));
            byte[] ContentIdBytes = Sha256(Encoding.ASCII.GetBytes(Encoding.ASCII.GetString(ContentId).PadRight((int)PKG_CONTENT_ID_BLOCK_SIZE, '\0')));

            byte[] data = new byte[IndexBytes.Length + ContentIdBytes.Length + Passcode.Length];
            Buffer.BlockCopy(IndexBytes, 0, data, 0, IndexBytes.Length);
            Buffer.BlockCopy(ContentIdBytes, 0, data, IndexBytes.Length, ContentIdBytes.Length);
            Buffer.BlockCopy(Passcode, 0, data, IndexBytes.Length + ContentIdBytes.Length, Passcode.Length);

            return Sha256(data);
        }

        private byte[] ComputeImageKey(byte[] ContentId, byte[] Passcode)
        {
            return ComputeKeys(ContentId, Passcode, 1);
        }

        private byte[] ComputeFingerprint(byte[] Passcode)
        {
            return HmacSha256(keystone_passcode_secret, Passcode);
        }

        private byte[] ComputeKeystone(byte[] Fingerprint)
        {
            var ms = new MemoryStream();
            var writer = new EndianWriter(ms, EndianType.LittleEndian);

            writer.Write("keystone");
            writer.Write((ushort)2);
            writer.Write((ushort)1);
            writer.Write(new byte[20]);
            writer.Write(Fingerprint);

            byte[] Digest = HmacSha256(keystone_ks_secret, ms.ToArray());
            writer.Write(Digest);

            writer.Close();
            writer.Dispose();

            return ms.ToArray();
        }

        private byte[] GenerateKeyBlock(byte[] Modulus, byte[] Exponent, byte[] Key)
        {
            byte[] Seed = new byte[Modulus.Length + Key.Length];
            Buffer.BlockCopy(Modulus, 0, Seed, 0, Modulus.Length);
            Buffer.BlockCopy(Key, 0, Seed, Modulus.Length, Key.Length);

            byte[] HashedSeed = Sha256(Sha256(Seed));

            uint[] SeedArray = new uint[HashedSeed.Length / sizeof(uint)];
            for (int i = 0; i < (HashedSeed.Length / sizeof(uint)); i++)
                SeedArray[i] = ReverseBytes(BitConverter.ToUInt32(HashedSeed, i * sizeof(uint)));

            var entropy = new Entropy(SeedArray);

            var message = new MemoryStream();
            var writer = new EndianWriter(message, EndianType.LittleEndian);

            writer.Write((byte)0);
            writer.Write((byte)2);
            writer.Write(entropy.CalculateEntropy(224));
            writer.Write((byte)0);
            writer.Write(Key);

            writer.Close();
            writer.Dispose();

            // FIX: .NET RSA does not want to work with generated message.
            return RsaEncrypt(message.ToArray(), RSA_TOP_SIGNATURE);
        }

        private static bool ArrayEquals(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;

            for (int i = 0; i < a.Length; i++)
                if (a[i] != b[i])
                    return false;

            return true;
        }

        private byte[] CalculateTopSignature()
        {
            IO.In.SeekTo(0);

            byte[] TopBlock = IO.In.ReadBytes(0xFE0);
            byte[] TopDigest = IO.In.ReadBytes(PKG_HASH_SIZE);
            byte[] TopSignature = IO.In.ReadBytes(0x100);

            byte[] ComputedTopDigest = Sha256(TopBlock);

            if (!ArrayEquals(TopDigest, ComputedTopDigest))
                throw new Exception("CNT: Invalid top digest.");

            byte[] TopBlockBytes = new byte[TopBlock.Length + TopDigest.Length];
            Buffer.BlockCopy(TopBlock, 0, TopBlockBytes, 0, TopBlock.Length);
            Buffer.BlockCopy(TopDigest, 0, TopBlockBytes, TopBlock.Length, TopDigest.Length);

            byte[] TopSignatureDigest = Sha256(TopBlockBytes);
            return GenerateKeyBlock(RSA_TOP_SIGNATURE.Modulus, RSA_TOP_SIGNATURE.Exponent, TopSignatureDigest);
        }

        private string EntryIdToString(EntryId id)
        {
            switch (id) {
                case EntryId.PKG_ENTRY_ID__DIGESTS: return ".digests";
                case EntryId.PKG_ENTRY_ID__ENTRY_KEYS: return ".entry_keys";
                case EntryId.PKG_ENTRY_ID__IMAGE_KEY: return ".image_key";
                case EntryId.PKG_ENTRY_ID__GENERAL_DIGESTS: return ".general_digests";
                case EntryId.PKG_ENTRY_ID__METAS: return ".metas";
                case EntryId.PKG_ENTRY_ID__ENTRY_NAMES: return ".entry_names";

                case EntryId.PKG_ENTRY_ID__LICENSE_DAT: return "license.dat";
                case EntryId.PKG_ENTRY_ID__LICENSE_INFO: return "license.info";
                case EntryId.PKG_ENTRY_ID__NPTITLE_DAT: return "nptitle.dat";
                case EntryId.PKG_ENTRY_ID__NPBIND_DAT: return "npbind.dat";
                case EntryId.PKG_ENTRY_ID__SELFINFO_DAT: return "selfinfo.dat";
                case EntryId.PKG_ENTRY_ID__IMAGEINFO_DAT: return "imageinfo.dat";
                case EntryId.PKG_ENTRY_ID__TARGET_DELTAINFO_DAT: return "target-deltainfo.dat";
                case EntryId.PKG_ENTRY_ID__ORIGIN_DELTAINFO_DAT: return "origin-deltainfo.dat";
                case EntryId.PKG_ENTRY_ID__PSRESERVED_DAT: return "psreserved.dat";
                case EntryId.PKG_ENTRY_ID__PARAM_SFO: return "param.sfo";
                case EntryId.PKG_ENTRY_ID__PLAYGO_CHUNK_DAT: return "playgo-chunk.dat";
                case EntryId.PKG_ENTRY_ID__PLAYGO_CHUNK_SHA: return "playgo-chunk.sha";
                case EntryId.PKG_ENTRY_ID__PLAYGO_MANIFEST_XML: return "playgo-manifest.xml";
                case EntryId.PKG_ENTRY_ID__PRONUNCIATION_XML: return "pronunciation.xml";
                case EntryId.PKG_ENTRY_ID__PRONUNCIATION_SIG: return "pronunciation.sig";
                case EntryId.PKG_ENTRY_ID__PIC1_PNG: return "pic1.png";
                case EntryId.PKG_ENTRY_ID__PUBTOOLINFO_DAT: return "pubtoolinfo.dat";
                case EntryId.PKG_ENTRY_ID__APP__PLAYGO_CHUNK_DAT: return "app/playgo-chunk.dat";
                case EntryId.PKG_ENTRY_ID__APP__PLAYGO_CHUNK_SHA: return "app/playgo-chunk.sha";
                case EntryId.PKG_ENTRY_ID__APP__PLAYGO_MANIFEST_XML: return "app/playgo-manifest.xml";
                case EntryId.PKG_ENTRY_ID__SHAREPARAM_JSON: return "shareparam.json";
                case EntryId.PKG_ENTRY_ID__SHAREOVERLAYIMAGE_PNG: return "shareoverlayimage.png";
                case EntryId.PKG_ENTRY_ID__SAVE_DATA_PNG: return "save_data.png";
                case EntryId.PKG_ENTRY_ID__SHAREPRIVACYGUARDIMAGE_PNG: return "shareprivacyguardimage.png";
                case EntryId.PKG_ENTRY_ID__ICON0_PNG: return "icon0.png";

                case EntryId iconpng when (iconpng >= EntryId.PKG_ENTRY_ID__ICON0_00_PNG && iconpng <= EntryId.PKG_ENTRY_ID__ICON0_30_PNG):
                    return string.Format("icon0_{0:00}.png", iconpng - EntryId.PKG_ENTRY_ID__ICON0_00_PNG);

                case EntryId.PKG_ENTRY_ID__PIC0_PNG: return "pic0.png";
                case EntryId.PKG_ENTRY_ID__SND0_AT9: return "snd0.at9";

                case EntryId picpng when (picpng >= EntryId.PKG_ENTRY_ID__PIC1_00_PNG && picpng <= EntryId.PKG_ENTRY_ID__PIC1_30_PNG):
                    return string.Format("pic1_{0:00}.png", picpng - EntryId.PKG_ENTRY_ID__PIC1_00_PNG);

                case EntryId.PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_XML: return "changeinfo/changeinfo.xml";

                case EntryId changeinfo when (changeinfo >= EntryId.PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_00_XML && changeinfo <= EntryId.PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_30_XML):
                    return string.Format("changeinfo/changeinfo_{0:00}.png", changeinfo - EntryId.PKG_ENTRY_ID__CHANGEINFO__CHANGEINFO_00_XML);

                case EntryId.PKG_ENTRY_ID__ICON0_DDS: return "icon0.dds";

                case EntryId icondds when (icondds >= EntryId.PKG_ENTRY_ID__ICON0_00_DDS && icondds <= EntryId.PKG_ENTRY_ID__ICON0_30_DDS):
                    return string.Format("icon0_{0:00}.dds", icondds - EntryId.PKG_ENTRY_ID__ICON0_00_DDS);

                case EntryId.PKG_ENTRY_ID__PIC0_DDS: return "pic0.dds";
                case EntryId.PKG_ENTRY_ID__PIC1_DDS: return "pic1.dds";

                case EntryId picdds when (picdds >= EntryId.PKG_ENTRY_ID__PIC1_00_DDS && picdds <= EntryId.PKG_ENTRY_ID__PIC1_30_DDS):
                    return string.Format("pic1_{0:00}.dds", picdds - EntryId.PKG_ENTRY_ID__PIC1_00_DDS);

                case EntryId trophytrp when (trophytrp >= EntryId.PKG_ENTRY_ID__TROPHY__TROPHY00_TRP && trophytrp <= EntryId.PKG_ENTRY_ID__TROPHY__TROPHY99_TRP):
                    return string.Format("trophy/trophy_{0:00}.trp", trophytrp - EntryId.PKG_ENTRY_ID__TROPHY__TROPHY00_TRP);

                case EntryId keymap when (keymap >= EntryId.PKG_ENTRY_ID__KEYMAP_RP__001_PNG && keymap <= EntryId.PKG_ENTRY_ID__KEYMAP_RP__010_PNG):
                    return string.Format("keymap_rp/keymap_rp{0:000}.png", keymap - EntryId.PKG_ENTRY_ID__KEYMAP_RP__001_PNG);

                case EntryId keymaprp when (keymaprp >= EntryId.PKG_ENTRY_ID__KEYMAP_RP__00__001_PNG && keymaprp <= EntryId.PKG_ENTRY_ID__KEYMAP_RP__30__010_PNG):
                    return string.Format("keymap_rp/{0}/keymap_rp{1:000}.png", (keymaprp - EntryId.PKG_ENTRY_ID__KEYMAP_RP__00__001_PNG) / 0x10, (keymaprp - EntryId.PKG_ENTRY_ID__KEYMAP_RP__00__001_PNG) % 0x10);

                default:
                    throw new Exception("CNT: Invalid 'Entry Id' value.");
            }
        }

        private ContainerHeader SeekToContainer(EndianIO io)
        {
            io.SeekTo(0x400);

            Pkg.Container.unk_0x400 = io.In.ReadUInt32();
            Pkg.Container.PfsImageCount = io.In.ReadUInt32();
            Pkg.Container.PfsFlags = io.In.ReadUInt64();
            Pkg.Container.PfsImageOffset = io.In.ReadUInt64();
            Pkg.Container.PfsImageSize = io.In.ReadUInt64();
            Pkg.Container.MountImageOffset = io.In.ReadUInt64();
            Pkg.Container.MountImageSize = io.In.ReadUInt64();
            Pkg.Container.PackageSize = io.In.ReadUInt64();
            Pkg.Container.PfsSignedSize = io.In.ReadUInt32();
            Pkg.Container.PfsCacheSize = io.In.ReadUInt32();
            Pkg.Container.PfsImageDigest = io.In.ReadBytes(PKG_HASH_SIZE);
            Pkg.Container.PfsSignedDigest = io.In.ReadBytes(PKG_HASH_SIZE);
            Pkg.Container.PfsSplitSizeNth0 = io.In.ReadUInt64();
            Pkg.Container.PfsSplitSizeNth1 = io.In.ReadUInt64();

            return Pkg.Container;
        }

        private byte[] RsaDecrypt(byte[] data, RSAParameters parameters)
        {
            using (var rsa = new RSACryptoServiceProvider(2048)) {
                // Import the Rsa key information.
                // This needs to include private key information.
                rsa.ImportParameters(parameters);
                return rsa.Decrypt(data, false);
            }
        }

        private byte[] RsaEncrypt(byte[] data, RSAParameters parameters)
        {
            using (var rsa = new RSACryptoServiceProvider(2048))
            {
                // Import the Rsa key information.
                // This needs to include private key information.
                rsa.ImportParameters(parameters);
                return rsa.Encrypt(data, true);
            }
        }

        private Entry[] SeekToEntries(EndianIO io)
        {
            io.SeekTo(0x2400);
            byte[] DecEntryKeyset = RsaDecrypt(io.In.ReadBytes(PKG_ENTRY_KEYSET_ENC_SIZE), RSA_TOP_SIGNATURE);

            byte[] ImageKey = ComputeImageKey(Encoding.ASCII.GetBytes(ContentId), Encoding.ASCII.GetBytes(Passcode));
            byte[] Fingerprint = ComputeFingerprint(Encoding.ASCII.GetBytes(Passcode));
            byte[] Keystone = ComputeKeystone(Fingerprint);

            //byte[] GeneratedTopSignature = GenerateKeyBlock(param.Modulus, param.Exponent, )

            io.SeekTo(Pkg.Header.EntryTableOffset);
            Pkg.Entries = new Entry[Pkg.Header.EntryCount];
            for (int i = 0; i < Pkg.Header.EntryCount; ++i) {
                Pkg.Entries[i].Id = (EntryId)IO.In.ReadUInt32();
                Pkg.Entries[i].unk = IO.In.ReadUInt32();
                Pkg.Entries[i].Flags1 = IO.In.ReadUInt32();
                Pkg.Entries[i].Flags2 = IO.In.ReadUInt32();
                Pkg.Entries[i].Offset = IO.In.ReadUInt32();
                Pkg.Entries[i].Size = IO.In.ReadUInt32();
                Pkg.Entries[i].Pad = IO.In.ReadUInt64();

                Pkg.Entries[i].Name = EntryIdToString(Pkg.Entries[i].Id);
                Pkg.Entries[i].KeyIndex = ((Pkg.Entries[i].Flags2 & 0xF000) >> 12);
                Pkg.Entries[i].IsEncrypted = ((Pkg.Entries[i].Flags1 & 0x80000000) != 0) ? true : false;
            }

            return Pkg.Entries;
        }

        #endregion

        #region Public Methods

        #region PlayStation 4 Package Structure

        public struct PackageFile
        {
            public PackageHeader Header;
            public ContainerHeader Container;
            public Entry[] Entries;

            public bool IsFinalized;
        };

        public struct PackageHeader
        {
            public uint Magic;
            public uint Flags;
            public uint unk_0x08;
            public uint unk_0x0C;
            public uint EntryCount;
            public ushort ScEntryCount;
            public ushort EntryCount2;
            public uint EntryTableOffset;
            public uint MainEntDataSize;
            public ulong BodyOffset;
            public ulong BodySize;
            public byte[] Pad;
            public string ContentId;
            public DrmType DrmType;
            public ContentType ContentType;
            public uint ContentFlags;
            public uint PromoteSize;
            public uint VersionDate;
            public uint VersionHash;
            public uint unk_0x88; /* for delta patches only? */
            public uint unk_0x8C; /* for delta patches only? */
            public uint unk_0x90; /* for delta patches only? */
            public uint unk_0x94; /* for delta patches only? */
            public IroTag IroTag;
            public uint EkcVersion;
            public byte[] Pad1;
            public byte[] ScEntries1Hash;
            public byte[] ScEntries2Hash;
            public byte[] DigestTableHash;
            public byte[] BodyDigest;
        };

        public struct ContainerHeader
        {
            public uint unk_0x400;
            public uint PfsImageCount;
            public ulong PfsFlags; // Still got to figure out flags.
            public ulong PfsImageOffset;
            public ulong PfsImageSize;
            public ulong MountImageOffset;
            public ulong MountImageSize;
            public ulong PackageSize;
            public uint PfsSignedSize;
            public uint PfsCacheSize;
            public byte[] PfsImageDigest;
            public byte[] PfsSignedDigest;
            public ulong PfsSplitSizeNth0;
            public ulong PfsSplitSizeNth1;
        }

        public struct Entry
        {
            public EntryId Id;
            public uint unk;
            public uint Flags1;
            public uint Flags2;
            public uint Offset;
            public uint Size;
            public ulong Pad;

            public string Name;
            public uint KeyIndex;
            public bool IsEncrypted;

            public byte[] ToArray() {
                var ms = new MemoryStream();
                var writer = new EndianWriter(ms, EndianType.BigEndian);

                writer.Write((uint)Id);
                writer.Write(unk);
                writer.Write(Flags1);
                writer.Write(Flags2);
                writer.Write(Offset);
                writer.Write(Size);
                writer.Write(Pad);

                writer.Close();

                return ms.ToArray();
            }
        }

        public struct EntryKeyset
        {
            public byte[] iv;
            public byte[] key;
        }

        #endregion

        public void Read()
        {
            IO.In.BaseStream.Position = 0;
            
            Pkg.Header.Magic = IO.In.ReadUInt32();
            Pkg.Header.Flags = IO.In.ReadUInt32();

            if (Pkg.Header.Magic != 0x7F434E54)
                throw new Exception("Invalid magic detected for loaded PKG file!");

            Pkg.IsFinalized = (Pkg.Header.Flags & PKG_FLAG_FINALIZED) != 0;

            Pkg.Header.unk_0x08 = IO.In.ReadUInt32();
            Pkg.Header.unk_0x0C = IO.In.ReadUInt32();

            Pkg.Header.EntryCount = IO.In.ReadUInt32();
            Pkg.Header.ScEntryCount = IO.In.ReadUInt16();
            Pkg.Header.EntryCount2 = IO.In.ReadUInt16();
            Pkg.Header.EntryTableOffset = IO.In.ReadUInt32();
            Pkg.Header.MainEntDataSize = IO.In.ReadUInt32();

            Pkg.Header.BodyOffset = IO.In.ReadUInt64();
            Pkg.Header.BodySize = IO.In.ReadUInt64();

            Pkg.Header.Pad = IO.In.ReadBytes(0x10);
            Pkg.Header.ContentId = IO.In.ReadAsciiString((int)PKG_CONTENT_ID_BLOCK_SIZE);

            Pkg.Header.DrmType = (DrmType)IO.In.ReadUInt32();
            Pkg.Header.ContentType = (ContentType)IO.In.ReadUInt32();
            Pkg.Header.ContentFlags = IO.In.ReadUInt32(); // Got to figure out the flags.
            Pkg.Header.PromoteSize = IO.In.ReadUInt32();
            Pkg.Header.VersionDate = IO.In.ReadUInt32();
            Pkg.Header.VersionHash = IO.In.ReadUInt32();

            Pkg.Header.unk_0x88 = IO.In.ReadUInt32();
            Pkg.Header.unk_0x8C = IO.In.ReadUInt32();
            Pkg.Header.unk_0x90 = IO.In.ReadUInt32();
            Pkg.Header.unk_0x94 = IO.In.ReadUInt32();
            Pkg.Header.IroTag = (IroTag)IO.In.ReadUInt32();
            Pkg.Header.EkcVersion = IO.In.ReadUInt32();

            Pkg.Header.Pad1 = IO.In.ReadBytes(96);
            Pkg.Header.ScEntries1Hash = IO.In.ReadBytes(PKG_HASH_SIZE);
            Pkg.Header.ScEntries2Hash = IO.In.ReadBytes(PKG_HASH_SIZE);
            Pkg.Header.DigestTableHash = IO.In.ReadBytes(PKG_HASH_SIZE);
            Pkg.Header.BodyDigest = IO.In.ReadBytes(PKG_HASH_SIZE);

            Pkg.Container = SeekToContainer(IO);
            Pkg.Entries = SeekToEntries(IO);

            byte[] sig = CalculateTopSignature();
            System.Windows.Forms.MessageBox.Show(BitConverter.ToString(sig));

            // Read PFS content.
            IO.In.SeekTo(Pkg.Container.PfsImageOffset);
            var PFS = new PlaystationFileSystem();
            PFS.Open(IO.In.ReadBytes(Pkg.Container.PfsSignedSize));
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the Passcode.
        /// </summary>
        public string Passcode
        {
            get { return _Passcode; }
            set {
                if (value.Length != PKG_PASSCODE_SIZE || !IsPasscodeValid(value))
                    throw new Exception("Invalid passcode specified!");

                _Passcode = value;
            }
        }

        /// <summary>
        /// Gets or sets the ContentId
        /// </summary>
        public string ContentId
        {
            get { return Pkg.Header.ContentId; }
            set {
                if (value.Length != PKG_CONTENT_ID_SIZE)
                    throw new Exception("Invalid Content Id specified!");

                Pkg.Header.ContentId = value;
            }
        }

        #endregion
    }
}